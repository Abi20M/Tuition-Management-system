import React, { useRef } from "react";
import {
  ClassData,
  ExamData,
} from "../../pages/ExamPortal/Teacher/TeacherExamPortalDashboard/TeacherExamPortalDashboard";
import { useReactToPrint } from "react-to-print";
import {
  Box,
  Button,
  Divider,
  Image,
  Title as MantineTitle,
  Table,
  Text,
} from "@mantine/core";
import {
  Chart as ChartJS,
  ArcElement,
  Tooltip,
  Legend,
  CategoryScale,
  LinearScale,
  PointElement,
  BarElement,
  LineElement,
  Title,
} from "chart.js";
import { Pie, Line, Bar } from "react-chartjs-2";
import {
  Average,
  GradeDistribution,
  ResultOverview,
} from "../../pages/ExamPortal/Teacher/TeacherExamPortalDashboard/TeacherExamPortalDashboard";
import tuitionLogo from "../../assets/logo1.png";
import { AttendanceData, ExamMarksData, StudentsData } from "./ManageExams";

ChartJS.register(
  ArcElement,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend
);

const gradeDistributionLabels = ["A", "B", "C", "F"];

interface ExamReportProps {
  exams: ExamData[];
  classes: ClassData[];
  resultOverview: ResultOverview;
  gradeDistribution: GradeDistribution[];
  average: Average[];
  role: string;
  students: StudentsData[];
}

const ExamsReport = ({
  exams,
  classes,
  resultOverview,
  gradeDistribution,
  average,
  role,
  students,
}: ExamReportProps) => {
  const componentRef = useRef<HTMLDivElement>(null);
  const handlePrint = useReactToPrint({
    content: () => componentRef.current,
  });
  const user = JSON.parse(localStorage.getItem(role) || "{}");
  const date = new Date();

  const pieChartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: "bottom" as const,
        style: {
          marginTop: "20px",
        },
      },
      title: {
        display: true,
        text: "Results Overview",
        font: {
          size: 20,
        },
      },
    },
  };

  const averageChartOptions = {
    responsive: true,
    tension: 0.5,
    plugins: {
      legend: {
        position: "top" as const,
      },
      title: {
        display: true,
        text: "Results (Last 6 Exams)",
        font: {
          size: 20,
        },
      },
    },
  };

  const gradeDistributionOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: "top" as const,
      },
      title: {
        display: true,
        text: "Grade Distribution",
        position: "top" as const,
        font: {
          size: 20,
        },
      },
    },
  };

  const pieChartData = {
    labels: ["Passed", "Failed", "Absent"],
    datasets: [
      {
        label: "# of Votes",
        data: [
          resultOverview.passed,
          resultOverview.failed,
          resultOverview.absent,
        ],
        backgroundColor: [
          "rgba(255, 99, 132, 0.2)",
          "rgba(54, 162, 235, 0.2)",
          "rgba(255, 206, 86, 0.2)",
        ],
        borderColor: [
          "rgba(255, 99, 132, 1)",
          "rgba(54, 162, 235, 1)",
          "rgba(255, 206, 86, 1)",
        ],
        borderWidth: 1,
      },
    ],
  };

  const gradeDistributionData = {
    labels: gradeDistributionLabels,
    datasets: gradeDistribution.map((item: any) => ({
      label: item.class,
      data: [item.A, item.B, item.C, item.F],
      backgroundColor: `rgba(${Math.floor(Math.random() * 255)},${Math.floor(
        Math.random() * 255
      )},${Math.floor(Math.random() * 255)},0.5)`,
    })),
  };

  const averageChartData = {
    labels: ["Exam 1", "Exam 2", "Exam 3", "Exam 4", "Exam 5", "Exam 6"],
    datasets: average.map((item: any) => ({
      label: item.class,
      data: item.average,
      backgroundColor: `rgba(${Math.floor(Math.random() * 255)},${Math.floor(
        Math.random() * 255
      )},${Math.floor(Math.random() * 255)},0.5)`,
      borderColor: `rgba(${Math.floor(Math.random() * 255)},${Math.floor(
        Math.random() * 255
      )},${Math.floor(Math.random() * 255)},1)`,
      borderWidth: 3,
    })),
  };

  return (
    <>
      <Box ref={componentRef}>
        <Box>
          <Box>
            <Image src={tuitionLogo} width={100} height={100} m="auto" />
            <MantineTitle style={{ textAlign: "center" }}>
              Tuition Management System
            </MantineTitle>
          </Box>
          <br />
          <Box w="90%" m="auto" sx={{ textAlign: "center" }}>
            <Text>
              Generated by: {user.name} ({role})
            </Text>
            <Text>
              Date: {date.getDate()}/{date.getMonth()}/{date.getFullYear()}
            </Text>
            <Text>
              Time: {date.getHours()}:{date.getMinutes()}:{date.getSeconds()}
            </Text>
          </Box>
          <Box
            sx={{
              display: "flex",
              justifyContent: "space-between",
              alignItems: "center",
              marginTop: "40px",
            }}
            w="95%"
            ml="auto"
            mr="auto"
            mt={20}
          >
            <Box sx={{ width: "305px", height: "400px" }}>
              <Pie data={pieChartData} options={pieChartOptions} />
            </Box>
            <Box sx={{ width: "600px", height: "400px" }}>
              <Line data={averageChartData} options={averageChartOptions} />
            </Box>
          </Box>
          <Box sx={{ width: "90%", height: "450px" }} ml="auto" mr="auto">
            <Bar
              data={gradeDistributionData}
              options={gradeDistributionOptions}
            />
          </Box>
        </Box>
        <Box
          sx={{ width: "90%", textAlign: "center" }}
          mr="auto"
          ml="auto"
          mt={75}
        >
          <MantineTitle>Exams</MantineTitle>
        </Box>
        {exams.length > 0 ? (
          exams.map((exam: ExamData) => (
            <Box w="90%" m="auto">
              <Box sx={{ width: "100%", textAlign: "left" }}>
                <MantineTitle order={3} ta="center">
                  {exam.examId + " - " + exam.name}
                </MantineTitle>
                <Text color="dimmed" weight="bold">
                  Class: {classes.find((c) => c.id === exam.class)?.name}
                </Text>
                <Text color="dimmed" weight="bold">
                  Description: {exam.description}
                </Text>
                <Text color="dimmed" weight="bold">
                  Status: {exam.status}
                </Text>
                <Text color="dimmed" weight="bold">
                  Date: {exam.date}
                </Text>
                <Text color="dimmed" weight="bold">
                  Time: {exam.time}
                </Text>
              </Box>
              {/* Attendance Table */}
              <Box sx={{ width: "90%", m: "auto", textAlign: "left" }}>
                <MantineTitle order={4} m={10}>
                  Attendance
                </MantineTitle>
              </Box>
              <Table
                horizontalSpacing="md"
                verticalSpacing="xs"
                sx={{ tableLayout: "fixed", width: "98%" }}
                withBorder
                withColumnBorders
                m={10}
              >
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Attendance</th>
                  </tr>
                </thead>
                <tbody>
                  {exam.attendance.length > 0 ? (
                    exam.attendance.map(
                      (attendance: AttendanceData) =>
                        students.find((s) => s.id === attendance.id) && (
                          <tr>
                            <td>
                              {
                                students.find((s) => s.id === attendance.id)
                                  ?.studentId
                              }
                            </td>
                            <td>
                              {
                                students.find((s) => s.id === attendance.id)
                                  ?.name
                              }
                            </td>
                            <td>{attendance.status ? "Present" : "Absent"}</td>
                          </tr>
                        )
                    )
                  ) : (
                    <tr>
                      <td colSpan={3}>No attendance found</td>
                    </tr>
                  )}
                </tbody>
              </Table>
              {/* Marks Table */}
              <Box sx={{ width: "90%", m: "auto", textAlign: "left" }}>
                <MantineTitle order={4} m={10}>
                  Results
                </MantineTitle>
              </Box>
              <Table
                horizontalSpacing="md"
                verticalSpacing="xs"
                sx={{ tableLayout: "fixed", width: "98%" }}
                withBorder
                withColumnBorders
                m={10}
              >
                <thead>
                  <tr>
                    <th>ID</th>
                    <th>Name</th>
                    <th>Grade</th>
                  </tr>
                </thead>
                <tbody>
                  {exam.marks.length > 0 ? (
                    exam.marks.map(
                      (result: ExamMarksData) =>
                        students.find((s) => s.id === result.id) && (
                          <tr>
                            <td>
                              {
                                students.find((s) => s.id === result.id)
                                  ?.studentId
                              }
                            </td>
                            <td>
                              {students.find((s) => s.id === result.id)?.name}
                            </td>
                            <td>
                              {result.marks.toString() === "-"
                                ? "Not Marked Yet"
                                : result.marks.toString()}
                            </td>
                          </tr>
                        )
                    )
                  ) : (
                    <tr>
                      <td colSpan={3}>No results found</td>
                    </tr>
                  )}
                </tbody>
              </Table>
              <br />
              <Divider my="sm" />
            </Box>
          ))
        ) : (
          <>
            <Box sx={{ width: "90%", m: "auto", textAlign: "center" }}>
              <MantineTitle order={3}>No exams found</MantineTitle>
            </Box>
            <br />
            <Divider my="sm" />
          </>
        )}
      </Box>
      <Button onClick={handlePrint}>Print Report</Button>
    </>
  );
};

export default ExamsReport;
