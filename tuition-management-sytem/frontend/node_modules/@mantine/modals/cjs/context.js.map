{"version":3,"file":"context.js","sources":["../src/context.ts"],"sourcesContent":["import { createContext, ReactNode } from 'react';\nimport { ModalProps } from '@mantine/core';\nimport type { ConfirmModalProps } from './ConfirmModal';\n\nexport type ModalSettings = Partial<Omit<ModalProps, 'opened'>> & { modalId?: string };\n\nexport type ConfirmLabels = Record<'confirm' | 'cancel', ReactNode>;\n\nexport interface OpenConfirmModal extends ModalSettings, ConfirmModalProps {}\nexport interface OpenContextModal<CustomProps extends Record<string, unknown> = {}>\n  extends ModalSettings {\n  innerProps: CustomProps;\n}\n\nexport interface ContextModalProps<T extends Record<string, unknown> = {}> {\n  context: ModalsContextProps;\n  innerProps: T;\n  id: string;\n}\n\nexport type ModalState =\n  | { id: string; props: ModalSettings; type: 'content' }\n  | { id: string; props: OpenConfirmModal; type: 'confirm' }\n  | { id: string; props: OpenContextModal; type: 'context'; ctx: string };\n\nexport interface ModalsContextProps {\n  modals: ModalState[];\n  openModal: (props: ModalSettings) => string;\n  openConfirmModal: (props: OpenConfirmModal) => string;\n  openContextModal: <CustomProps extends Record<string, unknown>>(\n    modal: string,\n    props: OpenContextModal<CustomProps>\n  ) => string;\n  closeModal: (id: string, canceled?: boolean) => void;\n  closeAll: () => void;\n}\n\nexport const ModalsContext = createContext<ModalsContextProps>(null);\nModalsContext.displayName = '@mantine/modals/ModalsContext';\n"],"names":["createContext"],"mappings":";;;;;;AACY,MAAC,aAAa,GAAGA,mBAAa,CAAC,IAAI,EAAE;AACjD,aAAa,CAAC,WAAW,GAAG,+BAA+B;;;;"}